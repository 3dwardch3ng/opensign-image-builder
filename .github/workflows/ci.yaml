name: ci

on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/arm/v7
          - linux/arm64
          - linux/amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: OpenSignLabs/OpenSign
          fetch-depth: 0
          path: opensign
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare Build
        run: |
          cp opensign/.env.local_dev opensign/.env
          cd opensign/apps/OpenSign && cp ../../.env.local_dev .env && npm install && npm run build
      - name: Docker meta - server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-server
      - name: Build and push by digest - server
        id: build-server
        uses: docker/build-push-action@v6
        with:
          context: opensign/apps/OpenSignServer
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-server.outputs.labels }}
          outputs: type=image,name=edeedeeed/opensign-server,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest - server
        run: |
          mkdir -p /tmp/digests/server
          digest-server="${{ steps.build-server.outputs.digest }}"
          touch "/tmp/digests/server/${digest-server#sha256:}"
      - name: Upload digest - server
        uses: actions/upload-artifact@v4
        with:
          name: digests-server-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/server/*
          if-no-files-found: error
          retention-days: 1
      - name: Docker meta - mongo
        id: meta-mongo
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-mongo
      - name: Build and push by digest - mongo
        id: build-mongo
        uses: docker/build-push-action@v6
        with:
          context: opensign/apps/mongo
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-mongo.outputs.labels }}
          outputs: type=image,name=edeedeeed/opensign-mongo,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest - mongo
        run: |
          mkdir -p /tmp/digests/mongo
          digest-mongo="${{ steps.build-mongo.outputs.digest }}"
          touch "/tmp/digests/mongo/${digest-mongo#sha256:}"
      - name: Upload digest - mongo
        uses: actions/upload-artifact@v4
        with:
          name: digests-mongo-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/mongo/*
          if-no-files-found: error
          retention-days: 1
      - name: Docker meta - client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-client
      - name: Build and push by digest - client
        id: build-client
        uses: docker/build-push-action@v6
        with:
          context: opensign/apps/OpenSign
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-client.outputs.labels }}
          outputs: type=image,name=edeedeeed/opensign-client,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest - client
        run: |
          mkdir -p /tmp/digests/client
          digest-client="${{ steps.build-client.outputs.digest }}"
          touch "/tmp/digests/client/${digest-client#sha256:}"
      - name: Upload digest - client
        uses: actions/upload-artifact@v4
        with:
          name: digests-client-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/client/*
          if-no-files-found: error
          retention-days: 1

  merge-server:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests - server
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/server
          pattern: digests-server-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-server
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,{{date 'YYYYMMDD'}}
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'edeedeeed/opensign-server@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect edeedeeed/opensign-server:${{ steps.meta.outputs.version }}

  merge-mongo:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests - mongo
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/mongo
          pattern: digests-mongo-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-mongo
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,{{date 'YYYYMMDD'}}
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'edeedeeed/opensign-mongo@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect edeedeeed/opensign-mongo:${{ steps.meta.outputs.version }}

  merge-client:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests - client
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests/client
          pattern: digests-client-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: edeedeeed/opensign-client
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule,{{date 'YYYYMMDD'}}
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'edeedeeed/opensign-client@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect edeedeeed/opensign-client:${{ steps.meta.outputs.version }}